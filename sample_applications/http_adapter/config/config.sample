# HTTP adapter configuration file
#
# common config parameters are at the beginning
# server port
port=8081
# API host name                
#API_HOST=api.sonera.fi   
#API_HOST=api.opaali.telia.fi
            
# log file name            
log_file=OpaaliLog.txt   
# log level: 0=NONE, 1=ERROR, 2=WARNING, 3=INFO, 4=DEBUG,
log_level=3
# always log to stderr too: 0=no, 1=yes
log_stderr=1
# append to existing log file: 0=no, 1=yes
log_append=1
# log_rotate - insert current date before last dot in filename: 0=no 1=yes
#log_rotate=1


# by default the http server is single threaded
# which may lead to lockups especially if you
# have more than one service configured
#
# you probably want to configure multiple threads
# using a thread pool
#
# set the threadpool size for http-server (optional, default is 1)
threadPoolSize=10


# service sections [name:type]            
#
# service will run at the /name URL path
# if name is empty the service will run at root path
# but notice that all incoming requests will then match
# this service and you cannot have any other services
#
# service type "cgw" is for sending MT messages using
# Content Gateway type of http request
[send:cgw]
# character set for CGW API side
cgwCharset=ISO-8859-1
#cgwCharset=UTF-8
# replace these with your own credentials (these won't work)      
applicationUserName=b535b0c5e5ae815cea82db6b32b5095a
applicationPassword=1%AMCC?u

# mask specified request parameters with '*' in log at log_level info
# -format: (key, position, length)
# -replaces key value (from left to right) starting from given position with '*' up to given length or end of value
# -if position is negative, applies mask right to left from end of value
# -length is optional, if omitted applies mask until the end/start of value
#log_mask=(to,-2,4),(msg,15)
            
# service type "receive" is for receiving callback notifications
# from Opaali for received MO messages
# (this service is available since v0.2.0)
#[opaalinotif:receive]
##opaaliCharset=UTF-8
#
# see above for log_mask usage
##log_mask=(msisdn,-2,4),(msg,15)

# incoming MO message notifications will be sent
# to a configurable target service using
# Content Gateway style HTTP GET requests
# using template URLs with macros filled in
# (notice that NOT all of the CGW macros are supported)
#
# a default URL is called when no there is no
# other matching configuration
#defaultUrl=http://localhost:80/?msisdn=$(M)&shortnumber=$(R)&keyword=$(1)&msg=$(*)
#
# a separate mapping file can be used for choosing the target
# based on keyword and/or short code
#mappingFile=mappings.txt
#
#
# allow caller to request actual processing to be queued for later processing: 0=no, 1=yes
# this is done by appending /nowait to the request URL
# this may be needed if the backend service cannot process requests fast enough
# if the queue is full, we fall back to normal processing and take the risk of timing out
# notice that if the queued processing fails or http server crashes the data may be lost
#nowait=0


# service type "qr" is a variant of "receive" service where the response body (if there is one) 
# is returned to the caller in a separate, queued MT request to mimic the functionality of
# CGW QR services
# (this service is available since v0.3.0)
#[opaaliqr:qr]
# see above for log_mask usage
##log_mask=(msisdn,-2,4),(msg,15)
#
# see above for defaultUrl and mappingFile usage
#defaultUrl=http://localhost:80/?msisdn=$(M)&shortnumber=$(R)&keyword=$(1)&msg=$(*)
#mappingFile=mappings.txt
#
# see above for nowait usage
# this affects only the MO notification processing, the MT response is always queued as it requires
# a separate Opaali API call
#nowait=0
#
# defaultReplyUrl is used to specify how the MT message for a Query Reply is sent,
# this can be the "cgw" service from the top of this configuration file
# notice how the $(MSG) macro is escaped by doubling the $,
# here the macros are expanded in two passes, once when creating the queued request
# (for sender/recipient) and again when the message content is available
#defaultReplyUrl=http://localhost:8081/send?to=$(M)&from=$(R)&msg=$$(MSG)


# an internal queue is automatically generated so it is not necessary to list here,
# unless you want to configure a log_mask or need to change the queue size
# even if more than one queue is configured in this file only one will be created
# (...and you have to guess which one of them)
#[internalq:queue]
#queueSize=20
#log_mask=(to,-2,4),(msg,15)

           
# end of config"
